
给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。

例如，给定二叉搜索树：
            4
         2    7
       1    3
     给定值为2
     返回如下子树：
          2
       1     3
    如果给定值为5,则返回NULL
    
    思路：利用二叉搜索树特定的性质来解题，即左<根<右。也就是任意一个结点的左子树中的所有结点均小于当前结点，其右子树中的所有结点均大于当前结点。
    那么这就是一个天然的二分么，所以用二分搜索法啊。
      首先判空，如果当前结点不存在，直接返回空。
      如果当前结点值等于目标值，返回当前结点。
      接下来就看如果当前结点值大于目标值，则对左子结点调用递归函数，否则就对右子结点调用递归函数.
    
    
 ## code:
    /**
    * Definition for a binary tree node.
    * struct TreeNode {
    *     int val;
    *     TreeNode *left;
    *     TreeNode *right;
    *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
    * };
    */
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if (!root) return NULL;
        if (root->val == val) return root;
        return (root->val > val)?searchBST(root->left,val):searchBST(root->right,val);
    }
};
