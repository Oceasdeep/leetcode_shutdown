题目：
    给定一个非负整数行数n，生成杨辉三角的前n行:
              1
            1   1
          1   2   1
        1   3   3   1
      1   4   6   4   1
    
    在杨辉三角中每个数都是它所在左上方和右上方的数之和。
示例：
    输入: 5
    输出:
    [
           [1],
          [1,1],
         [1,2,1],
        [1,3,3,1],
       [1,4,6,4,1]
    ]
    
思路：
    杨辉三角是二项式系数的一种写法，具体生成算法：每一行的首个和结尾一个数字都是1，
    从第三行开始，中间的每个数字都是上一行的左右两个数字之和。
    
    
代码：
    class Solution {
    public:
      vector<vector<int>> generate(int numRows) {   //generate
        vector<vector<int> > res;   //vector
        if (numRows <= 0) return res;
        res.assign(numRows, vector<int>(1));    //assign
        for (int i = 0; i < numRows; ++i) {
            res[i][0] = 1;
            if (i == 0) continue;   //continue
            for (int j = 1; j < i; ++j) {
                res[i].push_back(res[i-1][j] + res[i-1][j-1]);  //push_back
            }
            res[i].push_back(1);
          }
        return res;
      }
    };
    
    
