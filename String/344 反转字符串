编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。

不要给另外的数组分配额外的空间，必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。

可假设数组中的所有字符都是 ASCII 码表中的可打印字符。

示例 1：

输入：["h","e","l","l","o"]
输出：["o","l","l","e","h"]

示例 2：

输入：["H","a","n","n","a","h"]
输出：["h","a","n","n","a","H"]


思路：
    字符--ASCII码--二进制，通过二进制到亦或运算进行反转字符串
    
    class Solution {
    public:
        void reverseString(vector<char>& s) {
            for (size_t i = 0; i < s.size()/2; i++)
            {
                s[i] = s[i] ^ s[s.size() - 1 - i];
                s[s.size() - 1 - i] = s[i] ^ s[s.size() - 1 - i];
                s[i] = s[i] ^ s[s.size() - 1 - i];
            }
        }  
    };
    
    
    直接从两头往中间走，同时交换两边的字符：
    
    class Solution {
    public:
    string reverseString(string s) {
        int left = 0, right = s.size() - 1;
        while (left < right) {
            char t = s[left];
            s[left++] = s[right];
            s[right--] = t;
        }
        return s;
    }
};
